@Misc{Howard,
  author        = {Heidi Howard and Fritz Alder and Edward Ashton and Amaury Chamayou and Sylvan Clebsch and Manuel Costa and Antoine Delignat-Lavaud and Cedric Fournet and Andrew Jeffery and Matthew Kerner and Fotios Kounelis and Markus A. Kuppe and Julien Maffre and Mark Russinovich and Christoph M. Wintersteiger},
  title         = {Confidential Consortium Framework: Secure Multiparty Applications with Confidentiality, Integrity, and High Availability},
  year          = {2023},
  archiveprefix = {arXiv},
  eprint        = {2310.11559},
  primaryclass  = {cs.CR},
}

@Misc{Nimble,
  author       = {Sebastian Angel and Aditya Basu and Weidong Cui and Trent Jaeger and Stella Lau and Srinath Setty and Sudheesh Singanamalla},
  howpublished = {Cryptology ePrint Archive, Paper 2023/761},
  note         = {\url{https://eprint.iacr.org/2023/761}},
  title        = {Nimble: Rollback Protection for Confidential Cloud Services (extended version)},
  year         = {2023},
  url          = {https://eprint.iacr.org/2023/761},
}

@Article{Rollback,
  author   = {Csikor, Levente and Lim, Hoon Wei and Wong, Jun Wen and Ramesh, Soundarya and Parameswarath, Rohini Poolat and Chan, Mun Choon},
  journal  = {ACM Trans. Cyber-Phys. Syst.},
  title    = {RollBack: A New Time-Agnostic Replay Attack Against the Automotive Remote Keyless Entry Systems},
  year     = {2024},
  abstract = {Automotive Keyless Entry (RKE) systems provide car owners with a degree of convenience, allowing them to lock and unlock their car without using a mechanical key. Today’s RKE systems implement disposable rolling codes, making every key fob button press unique, effectively preventing simple replay attacks. However, a prior attack called RollJam was proven to break all rolling code–based systems in general. By a careful sequence of signal jamming, capturing, and replaying, an attacker can become aware of the subsequent valid unlock signal that has not been used yet. RollJam, however, requires continuous deployment indefinitely until it is exploited. Otherwise, the captured signals become invalid if the key fob is used again without RollJam in place.We introduce RollBack, a new replay-and-resynchronize attack against most of today’s RKE systems. In particular, we show that even though the one-time code becomes invalid in rolling code systems, replaying a few previously captured signals consecutively can trigger a rollback-like mechanism in the RKE system. Put differently, the rolling codes become resynchronized back to a previous code used in the past from where all subsequent yet already used signals work again. Moreover, the victim can still use the key fob without noticing any difference before and after the attack.Unlike RollJam, RollBack does not necessitate jamming at all. In fact, it requires signal capturing only once and can be exploited at any time in the future as many times as desired. This time-agnostic property is particularly attractive to attackers, especially in car-sharing/renting scenarios in which accessing the key fob is straightforward. However, while RollJam defeats virtually any rolling code–based system, vehicles might have additional anti-theft measures against malfunctioning key fobs, hence against RollBack. Our ongoing analysis (with crowd-sourced data) against different vehicle makes and models has revealed that ∼ 50\% of the examined vehicles in the Asian region are vulnerable to RollBack, whereas the impact tends to be smaller in other regions, such as Europe and North America.},
  doi      = {10.1145/3627827},
  keywords = {resynchronization, RollBack, RollJam, replay attack, vulnerability, rolling code, Remote Keyless Entry},
  url      = {https://doi.org/10.1145/3627827},
}

@InProceedings{TrustedComputing,
  author    = {Brandenburger, Marcus and Cachin, Christian and Kapitza, Rüdiger and Sorniotti, Alessandro},
  booktitle = {2019 38th Symposium on Reliable Distributed Systems (SRDS)},
  title     = {Trusted Computing Meets Blockchain: Rollback Attacks and a Solution for Hyperledger Fabric},
  year      = {2019},
  pages     = {324-32409},
  doi       = {10.1109/SRDS47363.2019.00045},
  keywords  = {Blockchain;Trusted Computing;Intel SGX;Hyperledger Fabric;TEE;Smart contract},
}

@Article{ccfOld,
  author  = {Russinovich, Mark and Ashton, Edward and Avanessians, Christine and Castro, Miguel and Chamayou, Amaury and Clebsch, Sylvan and Costa, Manuel and Fournet, C{\'e}dric and Kerner, Matthew and Krishna, Sid and others},
  journal = {Microsoft, Redmond, WA, USA, Tech. Rep. MSR-TR-2019-16},
  title   = {CCF: A framework for building confidential verifiable replicated services},
  year    = {2019},
}

@InProceedings{confidentiality,
  author       = {Fahl, Sascha and Harbach, Marian and Muders, Thomas and Smith, Matthew},
  booktitle    = {2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications},
  title        = {Confidentiality as a service--usable security for the cloud},
  year         = {2012},
  organization = {IEEE},
  pages        = {153--162},
}

@Article{cia,
  author    = {Aminzade, Michael},
  journal   = {Network Security},
  title     = {Confidentiality, integrity and availability--finding a balanced IT framework},
  year      = {2018},
  number    = {5},
  pages     = {9--11},
  volume    = {2018},
  publisher = {Elsevier},
}

@Book{ciaBook,
  author    = {Whitman, Michael E and Mattord, Herbert J and others},
  publisher = {Thomson Course Technology Boston, MA},
  title     = {Principles of information security},
  year      = {2009},
}

@InProceedings{ConfComp,
  author    = {Mulligan, Dominic P. and Petri, Gustavo and Spinale, Nick and Stockwell, Gareth and Vincent, Hugo J. M.},
  booktitle = {2021 International Symposium on Secure and Private Execution Environment Design (SEED)},
  title     = {Confidential Computing—a brave new world},
  year      = {2021},
  pages     = {132-138},
  doi       = {10.1109/SEED51797.2021.00025},
  keywords  = {Cloud computing;Codes;Protocols;Instruction sets;Electronics industry;Process control;Computer architecture;Confidential Computing;Arm® Confidential Compute Architecture (Arm CCA);Remote Attestation;Veracruz;IceCap},
}

@InProceedings{forkingAttacks,
  author    = {Briongos, Samira and Karame, Ghassan and Soriente, Claudio and Wilde, Annika},
  booktitle = {Proceedings of the 39th Annual Computer Security Applications Conference},
  title     = {No Forking Way: Detecting Cloning Attacks on Intel SGX Applications},
  year      = {2023},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  series    = {ACSAC '23},
  abstract  = {Forking attacks against TEEs like Intel SGX can be carried out either by rolling back the application to a previous state, or by cloning the application and by partitioning its inputs across the cloned instances. Current solutions to forking attacks require Trusted Third Parties (TTP) that are hard to find in real-world deployments. In the absence of a TTP, many TEE applications rely on monotonic counters to mitigate forking attacks based on rollbacks; however, they have no protection mechanism against forking attack based on cloning. In this paper, we analyze 72 SGX applications and show that approximately 20\% of those are vulnerable to forking attacks based on cloning—including those that rely on monotonic counters. To address this problem, we present CloneBuster, the first practical clone-detection mechanism for Intel SGX that does not rely on a TTP and, as such, can be used directly to protect existing applications. CloneBuster allows enclaves to (self-) detect whether another enclave with the same binary is running on the same platform. To do so, CloneBuster relies on a cache-based covert channel for enclaves to signal their presence to (and detect the presence of) clones on the same machine. We show that CloneBuster is robust despite a malicious OS, only incurs a marginal impact on the application performance, and adds approximately 800 LoC to the TCB. When used in conjunction with monotonic counters, CloneBuster allows applications to benefit from a comprehensive protection against forking attacks.},
  doi       = {10.1145/3627106.3627187},
  isbn      = {9798400708862},
  keywords  = {Cloning Attacks, Intel SGX, Trusted Execution Environments},
  location  = {, Austin, TX, USA,},
  numpages  = {15},
  url       = {https://doi.org/10.1145/3627106.3627187},
}

@InProceedings{sideChannel,
  author    = {Bukasa, Sebanjila Kevin and Lashermes, Ronan and Le Bouder, H{\'e}l{\`e}ne and Lanet, Jean-Louis and Legay, Axel},
  booktitle = {Information Security Theory and Practice: 11th IFIP WG 11.2 International Conference, WISTP 2017, Heraklion, Crete, Greece, September 28--29, 2017, Proceedings 11},
  title     = {How TrustZone could be bypassed: Side-channel attacks on a modern system-on-chip},
  year      = {2018},
  pages     = {93--109},
}

@Article{remoteAttestation,
  author    = {Alexander Sprog{\o} Banks and Marek Kisiel and Philip Korsholm},
  journal   = {CoRR},
  title     = {Remote Attestation: {A} Literature Review},
  year      = {2021},
  eprint    = {2105.02466},
  timestamp = {Wed, 12 May 2021 15:54:31 +0200},
  url       = {https://arxiv.org/abs/2105.02466},
}

@Misc{sgx,
  author       = {Victor Costan and Srinivas Devadas},
  howpublished = {Cryptology ePrint Archive, Paper 2016/086},
  note         = {\url{https://eprint.iacr.org/2016/086}},
  title        = {Intel {SGX} Explained},
  year         = {2016},
  url          = {https://eprint.iacr.org/2016/086},
}

@Article{amd,
  author  = {Sev-Snp, AMD},
  journal = {White Paper, January},
  title   = {Strengthening VM isolation with integrity protection and more},
  year    = {2020},
  pages   = {1450--1465},
}

@Misc{merkle,
  author = {Lum Ramabaja and Arber Avdullahu},
  title  = {Compact Merkle Multiproofs},
  year   = {2020},
  eprint = {2002.07648},
}

@Article{ledger,
  author  = {Deshpande, Advait and Stewart, Katherine and Lepetit, Louise and Gunashekar, Salil},
  journal = {Overview report The British Standards Institution (BSI)},
  title   = {Distributed Ledger Technologies/Blockchain: Challenges, opportunities and the prospects for standards},
  year    = {2017},
}

@InProceedings{rote,
  author    = {Matetic, Sinisa and Ahmed, Mansoor and Kostiainen, Kari and Dhar, Aritra and Sommer, David and Gervais, Arthur and Juels, Ari and Capkun, Srdjan},
  booktitle = {26th USENIX Security Symposium (USENIX Security 17)},
  title     = {$\{$ROTE$\}$: Rollback protection for trusted execution},
  year      = {2017},
  pages     = {1289--1306},
}

@InProceedings{narrator,
  author    = {Niu, Jianyu and Peng, Wei and Zhang, Xiaokuan and Zhang, Yinqian},
  booktitle = {Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security},
  title     = {Narrator: Secure and practical state continuity for trusted execution in the cloud},
  year      = {2022},
  pages     = {2385--2399},
}

@InProceedings{lcm,
  author    = {Brandenburger, Marcus and Cachin, Christian and Lorenz, Matthias and Kapitza, R{\"u}diger},
  booktitle = {2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
  title     = {Rollback and forking detection for trusted execution environments using lightweight collective memory},
  year      = {2017},
  pages     = {157--168},
}

@Article{rolljam,
  author     = {Csikor, Levente and Lim, Hoon Wei and Wong, Jun Wen and Ramesh, Soundarya and Parameswarath, Rohini Poolat and Chan, Mun Choon},
  journal    = {ACM Trans. Cyber-Phys. Syst.},
  title      = {RollBack: A New Time-Agnostic Replay Attack Against the Automotive Remote Keyless Entry Systems},
  year       = {2024},
  abstract   = {Automotive Keyless Entry (RKE) systems provide car owners with a degree of convenience, allowing them to lock and unlock their car without using a mechanical key. Today’s RKE systems implement disposable rolling codes, making every key fob button press unique, effectively preventing simple replay attacks. However, a prior attack called RollJam was proven to break all rolling code–based systems in general. By a careful sequence of signal jamming, capturing, and replaying, an attacker can become aware of the subsequent valid unlock signal that has not been used yet. RollJam, however, requires continuous deployment indefinitely until it is exploited. Otherwise, the captured signals become invalid if the key fob is used again without RollJam in place.We introduce RollBack, a new replay-and-resynchronize attack against most of today’s RKE systems. In particular, we show that even though the one-time code becomes invalid in rolling code systems, replaying a few previously captured signals consecutively can trigger a rollback-like mechanism in the RKE system. Put differently, the rolling codes become resynchronized back to a previous code used in the past from where all subsequent yet already used signals work again. Moreover, the victim can still use the key fob without noticing any difference before and after the attack.Unlike RollJam, RollBack does not necessitate jamming at all. In fact, it requires signal capturing only once and can be exploited at any time in the future as many times as desired. This time-agnostic property is particularly attractive to attackers, especially in car-sharing/renting scenarios in which accessing the key fob is straightforward. However, while RollJam defeats virtually any rolling code–based system, vehicles might have additional anti-theft measures against malfunctioning key fobs, hence against RollBack. Our ongoing analysis (with crowd-sourced data) against different vehicle makes and models has revealed that ∼ 50\% of the examined vehicles in the Asian region are vulnerable to RollBack, whereas the impact tends to be smaller in other regions, such as Europe and North America.},
  address    = {New York, NY, USA},
  articleno  = {5},
  doi        = {10.1145/3627827},
  issue_date = {January 2024},
  keywords   = {Remote Keyless Entry, rolling code, vulnerability, replay attack, RollJam, RollBack, resynchronization},
  numpages   = {25},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3627827},
}

@InProceedings{tee_insec,
  author    = {Van Bulck, Jo and Oswald, David and Marin, Eduard and Aldoseri, Abdulla and Garcia, Flavio D. and Piessens, Frank},
  booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  title     = {A Tale of Two Worlds: Assessing the Vulnerability of Enclave Shielding Runtimes},
  year      = {2019},
  pages     = {1741–1758},
  abstract  = {This paper analyzes the vulnerability space arising in Trusted Execution Environments (TEEs) when interfacing a trusted enclave application with untrusted, potentially malicious code. Considerable research and industry effort has gone into developing TEE runtime libraries with the purpose of transparently shielding enclave application code from an adversarial environment. However, our analysis reveals that shielding requirements are generally not well-understood in real-world TEE runtime implementations. We expose several sanitization vulnerabilities at the level of the Application Binary Interface (ABI) and the Application Programming Interface (API) that can lead to exploitable memory safety and side-channel vulnerabilities in the compiled enclave. Mitigation of these vulnerabilities is not as simple as ensuring that pointers are outside enclave memory. In fact, we demonstrate that state-of-the-art mitigation techniques such as Intel's edger8r, Microsoft's "deep copy marshalling", or even memory-safe languages like Rust fail to fully eliminate this attack surface. Our analysis reveals 35 enclave interface sanitization vulnerabilities in 8 major open-source shielding frameworks for Intel SGX, RISC-V, and Sancus TEEs. We practically exploit these vulnerabilities in several attack scenarios to leak secret keys from the enclave or enable remote code reuse. We have responsibly disclosed our findings, leading to 5 designated CVE records and numerous security patches in the vulnerable open-source projects, including the Intel SGX-SDK, Microsoft Open Enclave, Google Asylo, and the Rust compiler.},
  doi       = {10.1145/3319535.3363206},
  isbn      = {9781450367479},
  keywords  = {trusted execution, tee, side-channels, memory safety, intel sgx},
  location  = {London, United Kingdom},
  numpages  = {18},
  url       = {https://doi.org/10.1145/3319535.3363206},
}

@Comment{jabref-meta: databaseType:bibtex;}
